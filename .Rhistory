getSymbols('GDPC1',src = 'FRED')
View(CPIAUCNS)
View(CPIAUCNS)
data("AirPassengers")
View(Air)
View(AirPassengers)
df<-AirPassengers
?AirPassengers
df<-data.frame(AirPassengers)
View(df)
air.ts<-ts(air.df["AirPassengers"], start = c(1941,1), frequency = 12)
air.df<-data.frame(AirPassengers) # create a data frame from this data (not ts format)
air.ts<-ts(air.df["AirPassengers"], start = c(1941,1), frequency = 12)
air.df<-data.frame(AirPassengers) # create a data frame from this data (not ts format)
air.ts<-ts(air.df["AirPassengers"], start = c(1941,1), frequency = 12)
getSymbols('GDPC1',src = 'FRED')
View(air.ts)
autoplot(air.df)
autoplot(air.ts)
?autoplot
?AirPassengers
autoplot(air.ts) +
labs("Airline Passengers",
y="Monthly Total of Passengers (thousands)")
autoplot(air.ts) +
labs("Airline Passengers",
y="Monthly Total of Passengers (thousands)",
x=NULL)
?ggplot2
autoplot(air.ts, aes(col="blue")) +
labs("Airline Passengers",
y="Monthly Total of Passengers (thousands)",
x=NULL)
autoplot(air.ts) +
labs("Airline Passengers",
y="Monthly Total of Passengers (thousands)",
x=NULL) +
geom_line(color='darkblue')
autoplot(air.ts) +
labs("Airline Passengers",
y="Monthly Total of Passengers (thousands)",
x=NULL) +
geom_line(color='red')
autoplot(air.ts) +
labs(title="Airline Passengers",
y="Monthly Total of Passengers (thousands)",
x=NULL) +
geom_line(color='red') +
autoplot(air.ts) +
labs(title="Airline Passengers",
y="Monthly Total of Passengers (thousands)",
x=NULL) +
geom_line(color='red') +
s
autoplot(air.ts) +
labs(title="Airline Passengers",
y="Monthly Total of Passengers (thousands)",
x=NULL) +
geom_line(color='red')
autoplot(air.ts) +
labs(ggtitle="Airline Passengers",
y="Monthly Total of Passengers (thousands)",
x=NULL) +
geom_line(color='red')
autoplot(air.ts) +
labs(y="Monthly Total of Passengers (thousands)",
x=NULL) +
geom_line(color='red')
autoplot(air.ts) +
labs(y="Monthly Total of Passengers (thousands)",
x=NULL) +
geom_line(color='red') +
ggtitle("Airline Passengers") +
theme(
plot.title = element_text(color = "red",size = 14,face = "bold.italic")
)
autoplot(air.ts) +
labs(y="Monthly Total of Passengers (thousands)",
x=NULL) +
geom_line(color='red') +
ggtitle("Airline Passengers") +
theme(
plot.title = element_text(color = "red",size = 14,face = "bold.italic",hjust = 0.5)
)
autoplot(air.ts) +
labs(y="Monthly Total of Passengers (thousands)", # adds in y axis label
x=NULL) +  # but not for x axis
geom_line(color='red') +  #changes line color
ggtitle("Airline Passengers") +  #  givest the plot a title
theme( # changes aesthetic features of the plot
plot.title = element_text(color = "red",size = 14,face = "bold.italic",hjust = 0.5),
axis.title.x = element_text(color="blue",size=12, face="bold.italic") )
autoplot(air.ts) +
labs(y="Monthly Total of Passengers (thousands)", # adds in y axis label
x=NULL) +  # but not for x axis
geom_line(color='red') +  #changes line color
ggtitle("Airline Passengers") +  #  givest the plot a title
theme( # changes aesthetic features of the plot
plot.title = element_text(color = "red",size = 14,face = "bold.italic",hjust = 0.5),
axis.title.y = element_text(color="blue",size=12, face="bold.italic") )
) +
scale_y_continuous(breaks = 50)
) +
scale_y_continuous(breaks = seq(100,50,650))
) +
scale_y_continuous(breaks = seq(100,650,50))
) +
scale_y_continuous(scale= c(100,650),breaks = seq(100,650,50))
) +
scale_y_continuous(scale= c(100,650))
) +
scale_y_continuous(c(100,650))
) +
scale_y_continuous(limits=c(100,650))
) +
coord_cartesian(ylim = c(100,650)) +
scale_y_continuous(breaks = seq(0,15))
) +
coord_cartesian(ylim = c(100,650)) +
scale_y_continuous(breaks = seq(0,15,50))
) +
scale_y_continuous(breaks = c(100,200,300,400,500,600,700))
autoplot(air.ts) +
labs(y="Monthly Total of Passengers (thousands)", # adds in y axis label
x=NULL) +  # but not for x axis
geom_line(color='red') +  #changes line color
ggtitle("Airline Passengers") +  #  givest the plot a title
theme( # changes aesthetic features of the plot
plot.title = element_text(color = "red",size = 14,face = "bold.italic",hjust = 0.5),
axis.title.y = element_text(color="blue",size=12, face="bold.italic")
) +
scale_y_continuous(breaks = c(100,200,300,400,500,600,700))
autoplot(air.ts) +
labs(y="Monthly Total of Passengers (thousands)", # adds in y axis label
x=NULL) +  # but not for x axis
geom_line(color='red') +  #changes line color
ggtitle("Airline Passengers") +  #  givest the plot a title
theme( # changes aesthetic features of the plot
plot.title = element_text(color = "red",size = 14,face = "bold.italic",hjust = 0.5),
axis.title.y = element_text(color="blue",size=12, face="bold.italic"),
panel.background = element_rect(fill = "lightblue", color = "lightblue",size = 0.5,linetype = solid)
) +
scale_y_continuous(breaks = c(100,200,300,400,500,600,700))
autoplot(air.ts) +
labs(y="Monthly Total of Passengers (thousands)", # adds in y axis label
x=NULL) +  # but not for x axis
geom_line(color='red') +  #changes line color
ggtitle("Airline Passengers") +  #  givest the plot a title
theme( # changes aesthetic features of the plot
plot.title = element_text(color = "red",size = 14,face = "bold.italic",hjust = 0.5),
axis.title.y = element_text(color="blue",size=12, face="bold.italic"),
panel.background = element_rect(fill = "lightblue", color = "lightblue",size = 0.5,linetype = "solid")
) +
scale_y_continuous(breaks = c(100,200,300,400,500,600,700))
autoplot(air.ts) +
labs(y="Monthly Total of Passengers (thousands)", # adds in y axis label
x=NULL) +  # but not for x axis
geom_line(color='red',size=2) +  #changes line color
ggtitle("Airline Passengers") +  #  givest the plot a title
theme( # changes aesthetic features of the plot
plot.title = element_text(color = "red",size = 14,face = "bold.italic",hjust = 0.5),
axis.title.y = element_text(color="blue",size=12, face="bold.italic"),
panel.background = element_rect(fill = "lightblue", color = "lightblue",size = 0.5,linetype = "solid")
) +
scale_y_continuous(breaks = c(100,200,300,400,500,600,700))
autoplot(air.ts) +
labs(y="Monthly Total of Passengers (thousands)", # adds in y axis label
x=NULL) +  # but not for x axis
geom_line(color='red',size=2) +  #changes line color and width of line
ggtitle("Airline Passengers") +  #  givest the plot a title
theme( # changes aesthetic features of the plot
plot.title = element_text(color = "red",size = 14,face = "bold.italic",hjust = 0.5),
axis.title.y = element_text(color="red",size=12, face="bold.italic"),
panel.background = element_rect(fill = "green", color = "green",size = 0.5,linetype = "solid")
) +
scale_y_continuous(breaks = c(100,200,300,400,500,600,700))
autoplot(air.ts) +
labs(y="Monthly Total of Passengers (thousands)", # adds in y axis label
x=NULL) +  # but not for x axis
geom_line(color='red',size=2) +  #changes line color and width of line
ggtitle("Airline Passengers") +  #  givest the plot a title
theme( # changes aesthetic features of the plot
plot.title = element_text(color = "red",size = 14,face = "bold.italic",hjust = 0.5),
axis.title.y = element_text(color="red",size=12, face="bold.italic"),
panel.background = element_rect(fill = "darkgreen", color = "darkgreen",size = 0.5,linetype = "solid")
) +
scale_y_continuous(breaks = c(100,200,300,400,500,600,700))
autoplot(air.ts) +
labs(y="Monthly Total of Passengers (thousands)", # adds in y axis label
x=NULL) +  # but not for x axis
geom_line(color='black',size=2) +  #changes line color and width of line
ggtitle("Airline Passengers") +  #  givest the plot a title
theme( # changes aesthetic features of the plot
plot.title = element_text(color = "black",size = 14,face = "bold.italic",hjust = 0.5),
axis.title.y = element_text(color="black",size=12, face="bold.italic"),
panel.background = element_rect(fill = "gold", color = "gold",size = 0.5,linetype = "solid")
) +
scale_y_continuous(breaks = c(100,200,300,400,500,600,700))
autoplot(air.ts) # autoplot only works with ts data sets
autoplot(air.ts) +
labs(y="Monthly Total of Passengers (thousands)", # adds in y axis label
x=NULL) +  # but not for x axis
geom_line(color='black',size=2) +  #changes line color and width of line
ggtitle("Airline Passengers") +  #  givest the plot a title
theme( # changes aesthetic features of the plot
plot.title = element_text(color = "black",size = 14,face = "bold.italic",hjust = 0.5),
axis.title.y = element_text(color="black",size=12, face="bold.italic"),
panel.background = element_rect(fill = "gold", color = "gold",size = 0.5,linetype = "solid")
) +
scale_y_continuous(breaks = c(100,200,300,400,500,600,700))
?qcment
?qcement
cement<-qcement
ggseasonplot(cement,year.labels = FALSE, continuous = TRUE)
ggseasonplot(a10,year.labels = FALSE, continuous = TRUE)
?a10
?a10
ggseasonplot(a10,year.labels = FALSE, continuous = TRUE)
ggseasonplot(a10,year.labels = FALSE, continuous = TRUE, polar = TRUE)
ggseasonplot(a10,year.labels = FALSE, continuous = TRUE) +
scale_color_gradient(low="black",high="gold")
ggseasonplot(a10,year.labels = FALSE, continuous = TRUE, polar = TRUE)+
scale_color_gradient(low="black",high="gold")
ggseasonplot(a10,year.labels = FALSE, continuous = TRUE) +
scale_color_gradient(low="black",high="gold") +
theme(
panel.background = element_rect(fill = "gold", color = "gold",size = 0.5,linetype = "solid")
)
ggseasonplot(a10,year.labels = FALSE, continuous = TRUE) +
scale_color_gradient(low="black",high="gold") +
theme(
panel.background = element_rect(fill = "white", color = "white",size = 0.5,linetype = "solid")
)
ggseasonplot(a10,year.labels = FALSE, continuous = TRUE, polar = TRUE)+
scale_color_gradient(low="black",high="gold")+
theme(
panel.background = element_rect(fill = "white", color = "white",size = 0.5,linetype = "solid")
)
ggseasonplot(a10,year.labels = FALSE, continuous = TRUE, polar = TRUE)+
scale_color_gradient(low="black",high="gold")
ggseasonplot(a10,year.labels = FALSE, continuous = TRUE, polar = TRUE)+
scale_color_gradient(low="black",high="gold")+
theme_minimal()
autoplot(GDPC1)
?autoplot
?arrivals
autoplot(arrivals,facets = TRUE)
autoplot(arrivals)
autoplot(arrivals[,"Japan"])
install.packages("forecast")
install.packages("forecast")
library("forecast", lib.loc="~/R/win-library/3.4")
library(fpp2)
library(quantmod) # wrapper for website, doesn't require API key
?AirPassengers # find out more about our data
air.df<-data.frame(AirPassengers) # create a data frame from this data (not ts format)
View(air.df)
?ts
air.ts<-ts(air.df["AirPassengers"], start = c(1941,1), frequency = 12)
View(air.ts)
?arrivals
View(arrivals)
?a10
drugs<-a10
getSymbols('GDPC1',src = 'FRED')
autoplot(air.df) # creates an error
autoplot(air.ts) # autoplot only works with ts data sets
?autoplot
autoplot(air.ts) +
labs(y="Monthly Total of Passengers (thousands)", # adds in y axis label
x=NULL) +  # but not for x axis
geom_line(color='black',size=2) +  #changes line color and width of line
ggtitle("Airline Passengers") +  #  givest the plot a title
theme( # changes aesthetic features of the plot
plot.title = element_text(color = "black",size = 14,face = "bold.italic",hjust = 0.5),
axis.title.y = element_text(color="black",size=12, face="bold.italic"),
panel.background = element_rect(fill = "gold", color = "gold",size = 0.5,linetype = "solid")
) +
scale_y_continuous(breaks = c(100,200,300,400,500,600,700))
ggseasonplot(drugs,year.labels = FALSE, continuous = TRUE)
ggseasonplot(drugs,year.labels = FALSE, continuous = TRUE) +
scale_color_gradient(low="black",high="gold") +
theme(
panel.background = element_rect(fill = "white", color = "white",size = 0.5,linetype = "solid")
)
ggseasonplot(a10,year.labels = FALSE, continuous = TRUE, polar = TRUE)+
scale_color_gradient(low="black",high="gold")+
theme_minimal()
?arrivals
autoplot(arrivals)
autoplot(arrivals,facets = TRUE)
autoplot(arrivals[,"Japan"])
?library
library(forecast)
library(fpp2)
library(quantmod)
getSymbols('CPIAUCSL',src = 'FRED')
autoplot(air.ts) +
labs(y="Monthly Total of Passengers (thousands)", # adds in y axis label
x=NULL) +  # but not for x axis
geom_line(color='darkblue',size=2) +  #changes line color and width of line
ggtitle("Airline Passengers") +  #  givest the plot a title
theme( # changes aesthetic features of the plot
plot.title = element_text(color = "black",size = 14,face = "bold.italic",hjust = 0.5),
axis.title.y = element_text(color="black",size=12, face="bold.italic"),
panel.background = element_rect(fill = "gold", color = "gold",size = 0.5,linetype = "solid")
) +
scale_y_continuous(breaks = c(100,200,300,400,500,600,700))
autoplot(CPIAUCSL) +
labs(y="CPI (base = 1981-1984)"), # adds in y axis label
autoplot(CPIAUCSL) +
labs(y="CPI (base = 1981-1984)", # adds in y axis label
x=NULL) +  # but not for x axis
geom_line(color='darkblue',size=1.5) +  #changes line color and width of line
ggtitle("Consumer Price Index") +  #  givest the plot a title
theme( # changes aesthetic features of the plot
plot.title = element_text(color = "black",size = 14,face = "bold",hjust = 0.5),
axis.title.y = element_text(color="black",size=12, face="bold"),
panel.background = element_rect(fill = "lightyellow", color = "lightyellow",size = 0.5,linetype = "solid")
)
# code here
# code here
# code here
# code here
x<-1
x
library(ggplot2)
?ggplot
data(ozone)
library(maps)
data(ozone)
map("state", xlim = range(ozone$x), ylim = range(ozone$y))
map("state", xlim = range(ozone$x), ylim = range(ozone$y))
text(ozone$x, ozone$y, ozone$median)
box()
?ggseasonplot
library(forecast)
?ggseasonplot
install.packages("pandoc")
packageVersion('rmarkdown')
install.packages("installr")
require(installr)
install.pandoc()
#setwd("~/OneDrive - emporia.edu/ESU Fall 2019/EC 711 Metrics II/Slides")
setwd("C:/Users/rselby/OneDrive - emporia.edu/ESU Fall 2019/EC 711 Metrics II/Slides")
library(ggplot2)
library(forecast)
library(quantmod)
library(dplyr)
library(lmtest)
library(stargazer)
knitr::opts_chunk$set(warning=F,message=F)
load("propcrime.Rdata")
prop<-as.xts(ts(propcrime[,"proprate"],start = 1960,frequency = 1))
load("unrate.Rdata")
ur<-as.xts(ts(UNRATE[,"UNRATE"],start = 1948,frequency = 1))
ur<-ur["1960-01-01/2014-01-01"]
autoplot(prop)
t<-c(1:length(prop))
t2<-t^2
ols<-lm(prop~ur)
trend<-lm(prop~ur+t+t2)
stargazer(ols,trend,type = "html",dep.var.labels.include = F, dep.var.caption = "",column.labels = c("OLS","Trend"))
resid.ols<-resid(ols)
ols2<-fortify(ols)
ggplot(ols2,aes(x=ur,y=.resid,color=index(ols2)))+geom_point()
resid.trend<-resid(trend)
trend2<-fortify(trend)
ggplot(trend2,aes(x=ur,y=.resid,color=index(trend2)))+geom_point()
model<-lm(prop~t+t2)
prop2<-resid(model)
detrend<-lm(prop2~ur)
stargazer(ols,trend,detrend,type = "html",dep.var.labels.include = F, dep.var.caption = "",column.labels = c("OLS","Trend","Detrended"))
resid.detrend<-resid(detrend)
detrend2<-fortify(detrend)
ggplot(detrend2,aes(x=ur,y=.resid,color=index(detrend2)))+geom_point()
summary(lm(ur~lag(ur)))
y<-as.numeric(resid.trend)
x<-as.numeric(ur)
dwtest(y~x)
Box.test(resid.detrend,type = "Ljung-Box")
bgtest(resid.trend~ur,order = 2)
print(coeftest(bgtest(resid.trend~ur,order = 1)))
print(coeftest(bgtest(resid.trend~ur,order = 2)))
print(coeftest(bgtest(resid.trend~ur,order = 3)))
print(coeftest(bgtest(resid.trend~ur,order = 4)))
ar<-arima(resid.trend,xreg = ur,order = c(2,0,0))
ar
plot(residuals(ar))
resid.ar<-as.numeric(resid.ar)
resid.ar<-residuals(ar)
print(Box.test(resid.ar,type = "Ljung-Box"))
"$$Y_t = X_t + \varepsilon_t $$"
print("$$Y_t = X_t + \varepsilon_t $$")
x<-c("Hello","World")
print(x)
x<-c("Hello","World")
x
x<-c("Hello","World")
x
x<-c("Hello","World")
x
plot(cars)
head(cars)
2 + 1
install.packages("tutorial")
library(tutorial)
?tutorial
??tutorial
go_interactive(greedy = FALSE)
# Calculate 2 + 5, save as object a
# Print object a
#install.packages("tutorial")
require(tutorial)
go_interactive(greedy = FALSE)
# Calculate 2 + 5, save as object a
# Print object a
mean(cars$speed)
devtools::install_github("datacamp/tutorial")
require(tutorial)
b <- 5
# Create a variable a, equal to the average of speed of cars in data set "cars"
# Print out this average
# Create a variable a, equal to the average of speed of cars in data set "cars"
a <- mean(cars$speed)
# Print out this average
a
test_object("a")
install.packages("testwhat")
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20)
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
install.packages("dygraphs")
setwd("C:/Users/rselby/OneDrive - emporia.edu/Presentations")
setwd("C:/Users/rselby/OneDrive - emporia.edu/Presentations")
#setwd("~/OneDrive - emporia.edu/ESU Fall 2019/EC 711 Metrics II/Slides")
setwd("C:/Users/rselby/OneDrive - emporia.edu/Presentations")
knitr::opts_chunk$set(warning=F,message=F)
shinyAppDir(
system.file("shinyexample2", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
library(shiny)
library(shiny)
shinyAppDir(
system.file("shinyexample2", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
library(shiny)
shinyAppDir(
system.file("C:/Users/rselby/OneDrive - emporia.edu/Presentations/shinyexample2", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
library(shiny)
shinyAppDir(
system.file("C:/Users/rselby/OneDrive - emporia.edu/Presentations/shinyexample2.Rmd", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
setwd("C:/Users/rselby/Google Drive/GitHub/Econometrics/teaching-expo-2019")
library(dygraphs)
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyRangeSelector(dateWindow = c("1920-01-01", "1960-01-01"))
setwd("C:/Users/rselby/Google Drive/GitHub/Econometrics/teaching-expo-2019")
knitr::opts_chunk$set(warning=F,message=F)
print("The equation $$Y_t = X_t + \varepsilon_t $$ renders to")
x<-c("Hello","World")
x
x<-c("Hello","World")
x
x<-c("Hello","World")
x
head(cars)
plot(cars)
mean(cars$speed)
#install.packages("tutorial")
library(tutorial)
go_interactive(greedy = FALSE)
# Calculate 2 + 5, save as object a
# Print object a
library(plotly)
m <- list(
l = 50,
r = 50,
b = 100,
t = 100,
pad = 4
)
p <- plot_ly(cars, x = ~speed, y = ~dist) %>%
layout(autosize = F, width = 500, height = 500, margin = m)
p
library(dygraphs)
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyRangeSelector(dateWindow = c("1920-01-01", "1960-01-01"))
data()
?BJsales
View(BJsales)
library(lmtest)
dwtest(BJsales~1)
r<-resid(dwtest(BJsales~1))
r<-resid(BJsales~1)
r<-resid(lm(BJsales~1))
Box.test(r,type = "Ljung-Box")
bgtest(BJsales~1,order = 1)
